// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ProjectSyndraBackend.Data;

#nullable disable

namespace ProjectSyndraBackend.Service.Migrations
{
    [DbContext(typeof(ProjectSyndraContext))]
    [Migration("20250308210044_Region")]
    partial class Region
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0-preview.3.24172.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ProjectSyndraBackend.Data.Models.Account.HistoricalRank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateRecorded")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("LeaguePoints")
                        .HasColumnType("integer");

                    b.Property<int>("Losses")
                        .HasColumnType("integer");

                    b.Property<string>("QueueType")
                        .HasColumnType("text");

                    b.Property<string>("RankNumber")
                        .HasColumnType("text");

                    b.Property<string>("SummonerId")
                        .HasColumnType("text");

                    b.Property<string>("Tier")
                        .HasColumnType("text");

                    b.Property<int>("Wins")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SummonerId");

                    b.ToTable("HistoricalRanks");
                });

            modelBuilder.Entity("ProjectSyndraBackend.Data.Models.Account.Rank", b =>
                {
                    b.Property<int>("RankId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RankId"));

                    b.Property<int>("LeaguePoints")
                        .HasColumnType("integer");

                    b.Property<int>("Losses")
                        .HasColumnType("integer");

                    b.Property<string>("QueueType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RankNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SummonerId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Tier")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Wins")
                        .HasColumnType("integer");

                    b.HasKey("RankId");

                    b.HasIndex("SummonerId");

                    b.ToTable("Ranks");
                });

            modelBuilder.Entity("ProjectSyndraBackend.Data.Models.Account.Summoner", b =>
                {
                    b.Property<string>("SummonerId")
                        .HasColumnType("text");

                    b.Property<string>("AccountId")
                        .HasColumnType("text");

                    b.Property<string>("GameName")
                        .HasColumnType("text");

                    b.Property<string>("PlatformRegion")
                        .HasColumnType("text");

                    b.Property<int>("ProfileIconId")
                        .HasColumnType("integer");

                    b.Property<string>("Puuid")
                        .HasColumnType("text");

                    b.Property<string>("Region")
                        .HasColumnType("text");

                    b.Property<long>("RevisionDate")
                        .HasColumnType("bigint");

                    b.Property<string>("RiotSummonerId")
                        .HasColumnType("text");

                    b.Property<long>("SummonerLevel")
                        .HasColumnType("bigint");

                    b.Property<string>("SummonerName")
                        .HasColumnType("text");

                    b.Property<string>("TagLine")
                        .HasColumnType("text");

                    b.HasKey("SummonerId");

                    b.ToTable("Summoners");
                });

            modelBuilder.Entity("ProjectSyndraBackend.Data.Models.Match.Match", b =>
                {
                    b.Property<string>("MatchId")
                        .HasColumnType("text");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<string>("EndOfGameResult")
                        .HasColumnType("text");

                    b.Property<long>("MatchDate")
                        .HasColumnType("bigint");

                    b.Property<string>("Patch")
                        .HasColumnType("text");

                    b.Property<string>("QueueType")
                        .HasColumnType("text");

                    b.HasKey("MatchId");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("ProjectSyndraBackend.Data.Models.Match.MatchDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Assists")
                        .HasColumnType("integer");

                    b.Property<int>("ChampionId")
                        .HasColumnType("integer");

                    b.Property<string>("ChampionName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Deaths")
                        .HasColumnType("integer");

                    b.Property<List<int>>("Items")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<int>("Kills")
                        .HasColumnType("integer");

                    b.Property<string>("Lane")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MatchId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RunesId")
                        .HasColumnType("integer");

                    b.Property<string>("SummonerId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SummonerSpell1")
                        .HasColumnType("integer");

                    b.Property<int>("SummonerSpell2")
                        .HasColumnType("integer");

                    b.Property<bool>("Win")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.HasIndex("RunesId");

                    b.HasIndex("SummonerId");

                    b.ToTable("MatchDetails");
                });

            modelBuilder.Entity("ProjectSyndraBackend.Data.Models.Match.MatchSummoner", b =>
                {
                    b.Property<string>("MatchId")
                        .HasColumnType("text");

                    b.Property<string>("SummonerId")
                        .HasColumnType("text");

                    b.HasKey("MatchId", "SummonerId");

                    b.HasIndex("SummonerId");

                    b.ToTable("MatchSummoners");
                });

            modelBuilder.Entity("ProjectSyndraBackend.Data.Models.Match.Runes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Perk0")
                        .HasColumnType("integer");

                    b.Property<int>("Perk1")
                        .HasColumnType("integer");

                    b.Property<int>("Perk2")
                        .HasColumnType("integer");

                    b.Property<int>("Perk3")
                        .HasColumnType("integer");

                    b.Property<int>("Perk4")
                        .HasColumnType("integer");

                    b.Property<int>("Perk5")
                        .HasColumnType("integer");

                    b.Property<int>("PrimaryStyle")
                        .HasColumnType("integer");

                    b.Property<int[]>("RuneVars0")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<int[]>("RuneVars1")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<int[]>("RuneVars2")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<int[]>("RuneVars3")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<int[]>("RuneVars4")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<int[]>("RuneVars5")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<int>("StatDefense")
                        .HasColumnType("integer");

                    b.Property<int>("StatFlex")
                        .HasColumnType("integer");

                    b.Property<int>("StatOffense")
                        .HasColumnType("integer");

                    b.Property<int>("SubStyle")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Runes");
                });

            modelBuilder.Entity("ProjectSyndraBackend.Data.Models.Service.CurrentDataParameters", b =>
                {
                    b.Property<int>("CurrentDataParametersId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CurrentDataParametersId"));

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Patch")
                        .HasColumnType("text");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("CurrentDataParametersId");

                    b.ToTable("CurrentDataParameters");
                });

            modelBuilder.Entity("ProjectSyndraBackend.Data.Models.Account.HistoricalRank", b =>
                {
                    b.HasOne("ProjectSyndraBackend.Data.Models.Account.Summoner", "Summoner")
                        .WithMany()
                        .HasForeignKey("SummonerId");

                    b.Navigation("Summoner");
                });

            modelBuilder.Entity("ProjectSyndraBackend.Data.Models.Account.Rank", b =>
                {
                    b.HasOne("ProjectSyndraBackend.Data.Models.Account.Summoner", "Summoner")
                        .WithMany("Ranks")
                        .HasForeignKey("SummonerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Summoner");
                });

            modelBuilder.Entity("ProjectSyndraBackend.Data.Models.Match.MatchDetail", b =>
                {
                    b.HasOne("ProjectSyndraBackend.Data.Models.Match.Match", "Match")
                        .WithMany("MatchDetails")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectSyndraBackend.Data.Models.Match.Runes", "Runes")
                        .WithMany()
                        .HasForeignKey("RunesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectSyndraBackend.Data.Models.Account.Summoner", "Summoner")
                        .WithMany()
                        .HasForeignKey("SummonerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Match");

                    b.Navigation("Runes");

                    b.Navigation("Summoner");
                });

            modelBuilder.Entity("ProjectSyndraBackend.Data.Models.Match.MatchSummoner", b =>
                {
                    b.HasOne("ProjectSyndraBackend.Data.Models.Match.Match", "Match")
                        .WithMany("MatchSummoners")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectSyndraBackend.Data.Models.Account.Summoner", "Summoner")
                        .WithMany("MatchSummoners")
                        .HasForeignKey("SummonerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Match");

                    b.Navigation("Summoner");
                });

            modelBuilder.Entity("ProjectSyndraBackend.Data.Models.Account.Summoner", b =>
                {
                    b.Navigation("MatchSummoners");

                    b.Navigation("Ranks");
                });

            modelBuilder.Entity("ProjectSyndraBackend.Data.Models.Match.Match", b =>
                {
                    b.Navigation("MatchDetails");

                    b.Navigation("MatchSummoners");
                });
#pragma warning restore 612, 618
        }
    }
}
